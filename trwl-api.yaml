swagger: "2.0"
info:
  description: "This is the REST API for Träwelling."
  version: 0.3.0
  title: "TRWL app API"
  contact:
    name: "Träwelling Dev Team"
    url: "https://gitlab.com/HerrLevin_/trwl"
basePath: "/" #TODO: Need a final base path

definitions:
  arrivalId:
    type: integer #or do we need a string here?
  departureId:
    type: integer #or do we need a string here?
  stationId:
    type: integer #or do we need a string here?
  statusId:
    type: integer #or do we need a string here?
  transportId:
    type: integer #or do we need a string here?
  journeyId:
    type: integer #or do we need a string here?
  userId:
    type: integer #Do we even need this or is the username itself unique enough?
  Arrival:
    type: object
    properties:
      id:
        $ref: '#/definitions/arrivalId'
      station:
        $ref: '#/definitions/Station'
      date:
        $ref: '#/definitions/TravelDate'
  Coordinates:
    type: object
    properties:
      lat:
        type: number
        format: float
      lon:
        type: number
        format: float
  Departure: #TODO: Rename since we use this type for both departures and arrivals
    type: object
    properties:
      id:
        $ref: '#/definitions/departureId'
      transport:
        $ref: '#/definitions/Transport'
      date:
        $ref: '#/definitions/TravelDate'
  Polyline:
    type: array
    items:
      $ref: '#/definitions/Coordinates'
  Station:
    type: object
    properties:
      name:
        type: string
      id:
        $ref: '#/definitions/stationId'
  Status:
    type: object
    properties:
      id:
        $ref: '#/definitions/statusId'
      journey:
        $ref: '#/definitions/Journey'
      user:
        $ref: '#/definitions/User'
      statusText:
        type: string
        maxLength: 280
      timestamp:
        type: integer
        format: int64
        description: The time of the check-in as a Unix timestamp.
      likes:
        type: integer
  Transport:
    type: object
    properties:
      name:
        type: string
      type:
        type: string
        enum: [bus, business, express, ferry, private, regional, suburban, subway, tram]
      id:
        $ref: '#/definitions/transportId'
  TravelDate:
    type: object
    properties:
      dateTime:
        type: string
        format: 'date-time'
        description: The scheduled departure or arrival time of a transport.
      hasRealtime:
        type: boolean
        description: Determines whether this object provides realtime data.
          If it does, the value of the delay property should be evaluated.
      delay:
        type: integer
        description: A delay in seconds.
          The value of this property should only be set and/or evaluated
          if the hasRealtime property is set to true.
  Journey:
    type: object
    properties:
      id:
        $ref: '#/definitions/journeyId'
      start:
        $ref: '#/definitions/Station'
      end:
        $ref: '#/definitions/Station'
      transport:
        $ref: '#/definitions/Transport'
      departure:
        type: string
        format: 'date-time'
      arrival:
        type: string
        format: 'date-time'
      polyline:
        $ref: '#/definitions/Polyline'
  User:
    type: object
    properties:
      id:
        $ref: '#/definitions/userId'
      displayName:
        type: string
        description: A name that is solely used for display and not to identify the user
          internally in the system. Can be changed by the user.
      userName:
        type: string
        description: Uniquely identifies the user (a.k.a. their @-handle). Cannot be changed.
      avatar:
        type: string
        description: A URL to an image representing the user’s avatar.
      stats:
        $ref: '#/definitions/UserStats'
  UserStats:
    type: object
    properties:
      distance:
        type: number
        format: float
        description: The distance the user has travelled already given
          in kilometres.
      time:
        type: integer
        description: The time the user has spent travelling given in seconds.
      points:
        type: integer
        description: The points the user has earned.
#TODO: Add missing objects and other data types here

tags:
  - name: "Statuses"
    description: Query, add, and update statuses
  - name: "Check-in"
    description: Routes required to complete a full check-in workflow.

paths:
  /stations:
    get:
      tags: [Check-in]
      summary: Retrieves a list of stations.
      description: This endpoint can be called multiple times in succession when searching
        stations by name to provide suggestions for the user to select from. Please provide
        at least 3 characters when retrieving suggestions. Otherwise, only call this endpoint
        with less than 3 characters if the user explicitly requested a search.
      parameters:
        - in: query
          name: findBy
          type: string
          enum: [name, location]
          required: true
          description: Gets stations that match the given type.
        - in: query
          name: limit
          type: integer
          default: 10
          description: Limits the list of results to this amount.
        - in: query
          name: name
          type: string
          description: A (partial) station name that shall be searched for. When calling
            this endpoint without explicit user confirmation (e.g. when trying to provide
            suggestions) provide at least 3 characters.
        - in: query
          name: lat
          type: number
          format: float
          description: The latitude part of the location to be searched around as a float.
            Positive values are in the northern hemisphere, negative in the south.
        - in: query
          name: lon
          type: number
          format: float
          description: The longitude part of the location to be searched around as a float.
            Positive values are in the eastern hemisphere, negative in the west.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Station'
        400:
          description: Bad request. Will be issued when the type is “name” but the “name”
            parameter is not contained in the request. Will also be issued if the type is
            “location” but either the “lat” or “lon” (or both) parameters are missing.
  /stationboard:
    get:
      tags: [Check-in]
      summary: Retrieves departures for a station.
      parameters:
        - in: query
          name: stationId
          type: integer #or do we need a string here?
          required: true
        - in: query
          name: when
          type: string
          format: 'date-time'
          required: true
        - in: query
          name: until
          type: string
          format: 'date-time'
          description: Limits the output by time. All departures between
            when and until will be returned. If this parameter is omitted
            the API will return departures for the next 15 minutes.
        - in: query
          name: transportType
          type: string
          enum: [bus, express, ferry, regional, suburban, subway, tram]
          required: false
          description: Limits the output to departures of the given transport type
            only. If this parameter is omitted departures for all transport types
            will be returned.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Departure'
        400:
          description: Bad request. Will be issued if the "until" parameter
            is given but it is not in the future (relative to the "at"
            parameter). Will also be issued if any of the required parameters
            are missing.
  /stops:
    get:
      tags: [Check-in]
      summary: Retrieves the stations and the arrival times along a transport line.
      parameters:
        - in: query
          name: departureId
          type: integer
          required: true
          description: The ID of a departure that was previously returned by the
            “stationboard” route.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Arrival'
        404:
          description: Not found.
            The server does not know the given departureId.
  /journey:
    get:
      tags: [Check-in]
      summary: Makes a Journey out of a Departure and an Arrival.
      description: Takes a Departure, which uniquely identifies the start station and the
        transport, and an Arrival to create a Journey for the User which they can then
        check in to (i.e. by posting a Status).
        The server stores this Journey for up to a day to allow for “offline check ins”. For
        that purpose it remembers the exact time at which this Trip was created and by which
        User.
        This allows a belated Status to be posted by the app (e.g. in case of spotty cell
        reception) – the server would then still credit the full amount of points to the
        user if the timestamp of the Status and the internally stored timestamp for the
        Journey fall into the +/- 20 minutes timeframe around the departure (see issue 105).
      parameters:
        - in: query
          name: departureId
          type: integer
          required: true
          description: The ID of a Departure that was previously returned by the
            “stationboard” route.
        - in: query
          name: arrivalId
          type: integer
          required: true
          description: The ID of an Arrival that was previously returned by the “stops”
            route using the same departureId given in this call.
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Journey'
        400:
          description: Bad request.
            The given arrivalId does not match up with the departureId (e.g. if the Arrival
            is not on the same transport line as the Departure).
        404:
          description: Not Found.
            Either the departureId or the arrivalId were unknown to the server.
  /user:
    get:
      summary: Retrieves information on a user.
      parameters:
        - in: header
          name: If-Modified-Since
          type: string
          format: 'date-time'
          required: false
          description: If given it tells the server when the client has last requested this
            resource. It allows the server to respond with a 304 answer thus reducing traffic.
        - in: query
          name: userId
          required: true
          type: integer
      responses:
        200:
          description: OK
          headers:
            Last-Modified:
              description: The time and date when the object in the body was last modified on
                the server. The client can use this information in a future request in the
                If-Modified-Since header.
              type: string
              format: 'date-time'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        304:
          description: Not modified.
            The request contained an If-Modified-Since header and the requested object did
            not change on the server since then. The body will be empty in this case since the
            client already has the latest representation of this user.
        404:
          description: Not found.
            There is no user with the given userId.
  /follows:
    get:
      summary: Retrieves the list of users the given user is following.
      parameters:
        - in: header
          name: If-Modified-Since
          type: string
          format: 'date-time'
          required: false
          description: If given it tells the server when the client has last requested this
            resource. It allows the server to respond with a 304 answer thus reducing traffic.
        - in: query
          name: userId
          required: false
          type: integer
          description: If this parameter is omitted the server returns the list of users
            the currently logged in user is following.
      responses:
        200:
          description: OK
          headers:
            Last-Modified:
              description: The time and date when the list of users contained in the body was
                last modified on the server. This only means that the elements that make up the
                array have changed. It does not tell the client if any of the properties
                of the individual objects have or have not actually changed.
              type: string
              format: 'date-time'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        304:
          description: Not modified.
            The request contained an If-Modified-Since header and the requested list of users did
            not change on the server since then. The body will be empty in this case since the
            client already has the latest list of this user’s follows. However, the client should not
            assume that the properties of any of the users haven’t changed.
        404:
          description: Not found.
            There is no user with the given userId in case a userId was given.
  /leaderboard:
    get:
      summary: Retrieves the top 20 users.
      parameters:
        - in: header
          name: If-Modified-Since
          type: string
          format: 'date-time'
          required: false
          description: If given it tells the server when the client has last requested this
            resource. It allows the server to respond with a 304 answer thus reducing traffic.
        - in: query
          name: orderBy
          type: string
          enum: [points, distance]
          default: points
      responses:
        200:
          description: OK
          headers:
            Last-Modified:
              description: The time and date when the list of users contained in the body was
                last modified on the server. This only means that the elements that make up the
                array have changed. It does not tell the client if any of the properties
                of the individual objects have or have not actually changed.
              type: string
              format: 'date-time'
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        304:
          description: Not modified.
            The request contained an If-Modified-Since header and the requested list of users did
            not change on the server since then. The body will be empty in this case since the
            client already has the latest list of top 20 users for the given “orderBy” value. Note,
            that either one of the “orderBy” representations of the leaderboard may have changed
            since the If-Modified-Since date while the other one may have not. Also note, that the
            client should not assume that the properties of any of the users haven’t changed.
  /statuses:
    get:
      tags: [Statuses]
      summary: Retrieves a list of statuses.
      parameters:
        - in: query
          name: view
          type: string
          enum: [global, follows, enroute]
          default: global
          description: Filters the list of statuses so that it will either return the
            global view (i.e. all public statuses == global dashboard), just the statuses
            of the current user’s follows (i.e. the user’s dashboard), or all statuses
            which are currently en route.
        - in: query
          name: aroundDate
          type: string
          format: 'date-time'
          required: false
          description: A timestamp around which is to be searched for statuses. If it is
            omitted the current time at the server will be used. This parameter will be
            ignored if the “view” parameter is set to “enroute”, in which case the server
            time will always be used.
        - in: query
          name: age
          type: string
          enum: [older, newer]
          default: older
          description: Determines if statuses that are older or newer than “aroundDate”
            are to be returned. This parameter will be ignored if the “view” parameter
            is set to “enroute”, in which case “older” will always be used.
        - in: query
          name: maxStatuses
          type: integer
          default: 20
          maximum: 50
          description: Determines how many status objects will be returned at most in the
            response. If this parameter is set it must be an integer > 0.
      responses:
        200:
          description: OK.
            The returned array may be empty, for example if the “aroundDate” parameter is
            omitted (equalling it to server time) but the “age” parameter is set to “newer”.
            The array may contain less than “maxStatuses” objects if not as many statuses
            fulfill the given criteria.
          schema:
            type: array
            items:
              $ref: '#/definitions/Status'
        401:
          description: Unauthorized.
            Will be returned by the server if the “view” parameter was set to “global” or
            “follows”, but no user was logged in.
    post:
      tags: [Statuses, Check-in]
      summary: Adds one or more new statuses for the current user.
      parameters:
        - in: body
          name: "body"
          required: true
          description: An array of statuses to add. The ID values of the statuses should all
            be 0. They will be generated by the server. The “journey” object contained in a
            status may be a skeleton consisting only of the ID and nothing more. The ID must
            be valid. The “user” object should be omitted as the server will assume the
            currently logged in user. If it is contained, it will be ignored. The “likes”
            property of the status will be ignored by the server.
          schema:
            $ref: '#/definitions/Status'
      responses:
        201:
          description: Created
          schema:
            type: array
            items:
              type: object
              properties:
                points:
                  type: integer
                  description: The points credited to the current user for this particular status.
                status:
                  $ref: '#/definitions/Status'
        400:
          description: Bad request.
            The body of the request was somehow malformed. This could mean that e.g. required
            properties of a Status where missing. The server may provide details in an error
            message in the body of the response.
        404:
          description: Not found.
            A journey with the given ID is unknown to the server.
