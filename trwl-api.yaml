openapi: 3.0.0
info:
  description: "This is the REST API for Träwelling."
  version: 0.5.0
  title: "TRWL app API"
  contact:
    name: "Träwelling Dev Team"
    url: "https://gitlab.com/HerrLevin_/trwl"
servers:
  - url: "/" #TODO: Need a production server path
  - url: "/" #TODO: Need a test server path

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    arrivalId:
      type: integer #or do we need a string here?
    departureId:
      type: integer #or do we need a string here?
    stationId:
      type: integer #or do we need a string here?
    statusId:
      type: integer #or do we need a string here?
    transportId:
      type: integer #or do we need a string here?
    journeyId:
      type: integer #or do we need a string here?
    userId:
      type: integer #Do we even need this or is the username itself unique enough?
    Arrival:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/arrivalId'
        station:
          $ref: '#/components/schemas/Station'
        date:
          $ref: '#/components/schemas/TravelDate'
    Coordinates:
      type: object
      properties:
        lat:
          type: number
          format: float
        lon:
          type: number
          format: float
    Departure: #TODO: Rename since we use this type for both departures and arrivals
      type: object
      properties:
        id:
          $ref: '#/components/schemas/departureId'
        transport:
          $ref: '#/components/schemas/Transport'
        date:
          $ref: '#/components/schemas/TravelDate'
    Polyline:
      type: array
      items:
        $ref: '#/components/schemas/Coordinates'
    Station:
      type: object
      properties:
        name:
          type: string
        id:
          $ref: '#/components/schemas/stationId'
    Status:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/statusId'
        journey:
          $ref: '#/components/schemas/Journey'
        user:
          $ref: '#/components/schemas/User'
        statusText:
          type: string
          maxLength: 280
        timestamp:
          type: integer
          format: int64
          description: The time of the check-in as a Unix timestamp.
        likes:
          type: integer
    Transport:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
          enum: [bus, business, express, ferry, private, regional, suburban, subway, tram]
        id:
          $ref: '#/components/schemas/transportId'
    TravelDate:
      type: object
      properties:
        dateTime:
          type: string
          format: 'date-time'
          description: The scheduled departure or arrival time of a transport.
        hasRealtime:
          type: boolean
          description: Determines whether this object provides realtime data.
            If it does, the value of the delay property should be evaluated.
        delay:
          type: integer
          description: A delay in seconds.
            The value of this property should only be set and/or evaluated
            if the hasRealtime property is set to true.
    Journey:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/journeyId'
        start:
          $ref: '#/components/schemas/Station'
        end:
          $ref: '#/components/schemas/Station'
        transport:
          $ref: '#/components/schemas/Transport'
        departure:
          type: string
          format: 'date-time'
        arrival:
          type: string
          format: 'date-time'
        polyline:
          $ref: '#/components/schemas/Polyline'
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/userId'
        displayName:
          type: string
          description: A name that is solely used for display and not to identify the user
            internally in the system. Can be changed by the user.
        userName:
          type: string
          description: Uniquely identifies the user (a.k.a. their @-handle). Cannot be changed.
        avatar:
          type: string
          description: A URL to an image representing the user’s avatar.
        stats:
          $ref: '#/components/schemas/UserStats'
    UserStats:
      type: object
      properties:
        distance:
          type: number
          format: float
          description: The distance the user has travelled already given
            in kilometres.
        time:
          type: integer
          description: The time the user has spent travelling given in seconds.
        points:
          type: integer
          description: The points the user has earned.
#TODO: Add missing objects and other data types here

  responses:
    UnauthorizedError:
      description: Unauthorised.
        The use of this particular route requires a JWT which is missing or invalid.

tags:
  - name: "Statuses"
    description: Query, add, update, and delete statuses
  - name: "Check-in"
    description: Routes required to complete a full check-in workflow.
  - name: "User profile"
    description: Routes for editing the current user’s profile.

paths:
  /stations:
    get:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Retrieves a list of stations.
      description: This endpoint can be called multiple times in succession when searching
        stations by name to provide suggestions for the user to select from. Please provide
        at least 3 characters when retrieving suggestions. Otherwise, only call this endpoint
        with less than 3 characters if the user explicitly requested a search.
      parameters:
        - in: query
          name: findBy
          schema:
            type: string
            enum: [name, location]
          required: true
          description: Gets stations that match the given type.
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Limits the list of results to this amount.
        - in: query
          name: name
          schema:
            type: string
          description: A (partial) station name that shall be searched for. When calling
            this endpoint without explicit user confirmation (e.g. when trying to provide
            suggestions) provide at least 3 characters.
        - in: query
          name: lat
          schema:
            type: number
            format: float
          description: The latitude part of the location to be searched around as a float.
            Positive values are in the northern hemisphere, negative in the south.
        - in: query
          name: lon
          schema:
            type: number
            format: float
          description: The longitude part of the location to be searched around as a float.
            Positive values are in the eastern hemisphere, negative in the west.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          description: Bad request. Will be issued when the type is “name” but the “name”
            parameter is not contained in the request. Will also be issued if the type is
            “location” but either the “lat” or “lon” (or both) parameters are missing.
  /stationboard:
    get:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Retrieves departures for a station.
      parameters:
        - in: query
          name: stationId
          schema:
            $ref: '#/components/schemas/stationId'
          required: true
        - in: query
          name: when
          schema:
            type: string
            format: 'date-time'
          required: true
        - in: query
          name: until
          schema:
            type: string
            format: 'date-time'
          description: Limits the output by time. All departures between
            when and until will be returned. If this parameter is omitted
            the API will return departures for the next 15 minutes.
        - in: query
          name: transportType
          schema:
            type: string
            enum: [bus, express, ferry, regional, suburban, subway, tram]
          required: false
          description: Limits the output to departures of the given transport type
            only. If this parameter is omitted departures for all transport types
            will be returned.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Departure'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        400:
          description: Bad request. Will be issued if the "until" parameter
            is given but it is not in the future (relative to the "at"
            parameter). Will also be issued if any of the required parameters
            are missing.
  /stops:
    get:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Retrieves the stations and the arrival times along a transport line.
      parameters:
        - in: query
          name: departureId
          schema:
            $ref: '#/components/schemas/departureId'
          required: true
          description: The ID of a departure that was previously returned by the
            “stationboard” route.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Arrival'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Not found.
            The server does not know the given departureId.
  /journey:
    get:
      security:
        - bearerAuth: []
      tags: [Check-in]
      summary: Makes a Journey out of a Departure and an Arrival.
      description: Takes a Departure, which uniquely identifies the start station and the
        transport, and an Arrival to create a Journey for the User which they can then
        check in to (i.e. by posting a Status).
        The server stores this Journey for up to a day to allow for “offline check ins”. For
        that purpose it remembers the exact time at which this Trip was created and by which
        User.
        This allows a belated Status to be posted by the app (e.g. in case of spotty cell
        reception) – the server would then still credit the full amount of points to the
        user if the timestamp of the Status and the internally stored timestamp for the
        Journey fall into the +/- 20 minutes timeframe around the departure (see issue 105).
      parameters:
        - in: query
          name: departureId
          schema:
            $ref: '#/components/schemas/departureId'
          required: true
          description: The ID of a Departure that was previously returned by the
            “stationboard” route.
        - in: query
          name: arrivalId
          schema:
            $ref: '#/components/schemas/arrivalId'
          required: true
          description: The ID of an Arrival that was previously returned by the “stops”
            route using the same departureId given in this call.
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Journey'
        400:
          description: Bad request.
            The given arrivalId does not match up with the departureId (e.g. if the Arrival
            is not on the same transport line as the Departure).
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Not Found.
            Either the departureId or the arrivalId were unknown to the server.
  /user:
    get:
      summary: Retrieves information on a user.
      parameters:
        - in: header
          name: If-Modified-Since
          schema:
            type: string
            format: 'date-time'
          required: false
          description: If given it tells the server when the client has last requested this
            resource. It allows the server to respond with a 304 answer thus reducing traffic.
        - in: query
          name: userId
          required: true
          schema:
            $ref: '#/components/schemas/userId'
      responses:
        200:
          description: OK
          headers:
            Last-Modified:
              description: The time and date when the object in the body was last modified on
                the server. The client can use this information in a future request in the
                If-Modified-Since header.
              schema:
                type: string
                format: 'date-time'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        304:
          description: Not modified.
            The request contained an If-Modified-Since header and the requested object did
            not change on the server since then. The body will be empty in this case since the
            client already has the latest representation of this user.
        404:
          description: Not found.
            There is no user with the given userId.
  /user/avatar:
    put:
      security:
        - bearerAuth: []
      tags: [User profile]
      summary: Sets a new avatar image for the current user.
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
        description: An image to be used as the new avatar for the current user.
      responses:
        200: #TODO: Does a 204 make more sense? Or would we return the URL to the new avatar in the body? Or the user object even?
          description: OK.
            The avatar was successfully uploaded.
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /user/name:
    put:
      security:
        - bearerAuth: []
      tags: [User profile]
      summary: Updates the display name of the current user.
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        description: The new display name to be used for the current user.
      responses:
        200: #TODO: Does a 204 make more sense? Or should we return the updated user object?
          description: OK.
            The displayName of the current user was changed.
        401:
          $ref: '#/components/responses/UnauthorizedError'
  /follows:
    get:
      security:
        - bearerAuth: []
      summary: Retrieves the list of users the given user is following.
      parameters:
        - in: header
          name: If-Modified-Since
          schema:
            type: string
            format: 'date-time'
          required: false
          description: If given it tells the server when the client has last requested this
            resource. It allows the server to respond with a 304 answer thus reducing traffic.
        - in: query
          name: userId
          required: false
          schema:
            $ref: '#/components/schemas/userId'
          description: If this parameter is omitted the server returns the list of users
            the currently logged in user is following.
      responses:
        200:
          description: OK
          headers:
            Last-Modified:
              description: The time and date when the list of users contained in the body was
                last modified on the server. This only means that the elements that make up the
                array have changed. It does not tell the client if any of the properties
                of the individual objects have or have not actually changed.
              schema:
                type: string
                format: 'date-time'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        304:
          description: Not modified.
            The request contained an If-Modified-Since header and the requested list of users did
            not change on the server since then. The body will be empty in this case since the
            client already has the latest list of this user’s follows. However, the client should not
            assume that the properties of any of the users haven’t changed.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Not found.
            There is no user with the given userId in case a userId was given.
  /leaderboard:
    get:
      summary: Retrieves the top 20 users.
      parameters:
        - in: header
          name: If-Modified-Since
          schema:
            type: string
            format: 'date-time'
          required: false
          description: If given it tells the server when the client has last requested this
            resource. It allows the server to respond with a 304 answer thus reducing traffic.
        - in: query
          name: orderBy
          schema:
            type: string
            enum: [points, distance]
            default: points
      responses:
        200:
          description: OK
          headers:
            Last-Modified:
              description: The time and date when the list of users contained in the body was
                last modified on the server. This only means that the elements that make up the
                array have changed. It does not tell the client if any of the properties
                of the individual objects have or have not actually changed.
              schema:
                type: string
                format: 'date-time'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        304:
          description: Not modified.
            The request contained an If-Modified-Since header and the requested list of users did
            not change on the server since then. The body will be empty in this case since the
            client already has the latest list of top 20 users for the given “orderBy” value. Note,
            that either one of the “orderBy” representations of the leaderboard may have changed
            since the If-Modified-Since date while the other one may have not. Also note, that the
            client should not assume that the properties of any of the users haven’t changed.
  /statuses:
    get:
      security:
        - bearerAuth: []
      tags: [Statuses]
      summary: Retrieves a list of statuses.
      description: This route will accept calls without a Bearer token in the HTTP header if
        the “view” parameter is set to “enroute”.
      parameters:
        - in: query
          name: view
          schema:
            type: string
            enum: [global, follows, enroute]
            default: enroute
          description: Filters the list of statuses so that it will either return the
            global view (i.e. all public statuses == global dashboard), just the statuses
            of the current user’s follows (i.e. the user’s dashboard), or all statuses
            which are currently en route.
        - in: query
          name: aroundDate
          schema:
            type: string
            format: 'date-time'
          required: false
          description: A timestamp around which is to be searched for statuses. If it is
            omitted the current time at the server will be used. This parameter will be
            ignored if the “view” parameter is set to “enroute”, in which case the server
            time will always be used.
        - in: query
          name: age
          schema:
            type: string
            enum: [older, newer]
            default: older
          description: Determines if statuses that are older or newer than “aroundDate”
            are to be returned. This parameter will be ignored if the “view” parameter
            is set to “enroute”, in which case “older” will always be used.
        - in: query
          name: maxStatuses
          schema:
            type: integer
            default: 20
            maximum: 50
          description: Determines how many status objects will be returned at most in the
            response. If this parameter is set it must be an integer > 0.
      responses:
        200:
          description: OK.
            The returned array may be empty, for example if the “aroundDate” parameter is
            omitted (equalling it to server time) but the “age” parameter is set to “newer”.
            The array may contain less than “maxStatuses” objects if not as many statuses
            fulfill the given criteria.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        401:
          description: Unauthorized.
            Will be returned by the server if the “view” parameter was set to “global” or
            “follows”, but no user was logged in.
    post:
      security:
        - bearerAuth: []
      tags: [Statuses, Check-in]
      summary: Adds one or more new statuses for the current user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Status'
        description: An array of statuses to add. The ID values of the statuses should all
          be 0. They will be generated by the server. The “journey” object contained in a
          status may be a skeleton consisting only of the ID and nothing more. The ID must
          be valid. The “user” object should be omitted as the server will assume the
          currently logged in user. If it is contained, it will be ignored. The “likes”
          property of the status will be ignored by the server.
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    points:
                      type: integer
                      description: The points credited to the current user for this particular status.
                    status:
                      $ref: '#/components/schemas/Status'
        400:
          description: Bad request.
            The body of the request was somehow malformed. This could mean that e.g. required
            properties of a Status where missing. The server may provide details in an error
            message in the body of the response.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Not found.
            A journey with the given ID is unknown to the server.
  /status/{id}:
    put:
      security:
        - bearerAuth: []
      tags: [Statuses]
      summary: Update a status that the current user had posted previously.
      requestBody:
        content:
          text/plain:
            schema:
              type: string
              maxLength: 280
        description: The new status text to set in the status with the given ID.
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/statusId'
          required: true
          description: The ID of the status to modify.
      responses:
        200:
          description: OK.
            The status object has been modified on the server (i.e. the status text was
            changed). The response contains the modified version of the status.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Status'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Not found.
            The status objects in the request were valid, but the server did not know their id.
    delete:
      security:
        - bearerAuth: []
      tags: [Statuses]
      summary: Removes a status that the current user had posted previously.
      parameters:
        - in: path
          name: id
          schema:
            $ref: '#/components/schemas/statusId'
          required: true
          description: The ID of the status to delete.
      responses:
        204:
          description: No content.
            The status with the given ID has been deleted. Nothing further needs to be said, so
            the response will not have any content.
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: Not found.
            The server does not know a status with the given ID.
