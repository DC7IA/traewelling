swagger: "2.0"
info:
  description: "This is the REST API for Träwelling."
  version: 0.0.1
  title: "TRWL app API"
  contact:
    name: "Träwelling Dev Team"
    url: "https://gitlab.com/HerrLevin_/trwl"
basePath: "/" #TODO: Need a final base path

definitions:
  stationId:
    type: integer #or do we need a string here?
  statusId:
    type: integer #or do we need a string here?
  transportId:
    type: integer #or do we need a string here?
  tripId:
    type: integer #or do we need a string here?
  userId:
    type: integer #Do we even need this or is the username itself unique enough?
  Departure:
    type: object
    properties:
      transport:
        $ref: '#/definitions/Transport'
      date:
        $ref: '#/definitions/TravelDate'
  Station:
    type: object
    properties:
      name:
        type: string
      id:
        $ref: '#/definitions/stationId'
  Status:
    type: object
    properties:
      id:
        $ref: '#/definitions/statusId'
      trip:
        $ref: '#/definitions/Trip'
      user:
        $ref: '#/definitions/User'
      statusText:
        type: string
      timestamp:
        type: integer
        format: int64
        description: The time of the check-in as a Unix timestamp.
      likes:
        type: integer
  Transport:
    type: object
    properties:
      name:
        type: string
      type:
        type: string #TODO: Do we need an enum here?
      id:
        $ref: '#/definitions/transportId'
  TravelDate:
    type: object
    properties:
      dateTime:
        type: string
        format: 'date-time'
        description: The scheduled departure or arrival time of a transport.
      hasRealtime:
        type: boolean
        description: Determines whether this object provides realtime data.
          If it does, the value of the delay property should be evaluated.
      delay:
        type: integer
        description: A delay in seconds.
          The value of this property should only be set and/or evaluated
          if the hasRealtime property is set to true.
  Trip:
    type: object
    properties:
      id:
        $ref: '#/definitions/tripId'
      start:
        $ref: '#/definitions/Station'
      end:
        $ref: '#/definitions/Station'
      transport:
        $ref: '#/definitions/Transport'
      departure:
        type: string
        format: 'date-time'
      arrival:
        type: string
        format: 'date-time'
  User:
    type: object
    properties:
      id:
        $ref: '#/definitions/userId'
      displayName:
        type: string
        description: A name that is solely used for display and not to identify the user
          internally in the system. Can be changed by the user.
      userName:
        type: string
        description: Uniquely identifies the user (a.k.a. their @-handle). Cannot be changed.
      avatar:
        type: string
        description: A URL to an image representing the user’s avatar.
      stats:
        $ref: '#/definitions/UserStats'
  UserStats:
    type: object
    properties:
      distance:
        type: number
        format: float
        description: The distance the user has travelled already given
          in kilometres.
      time:
        type: integer
        description: The time the user has spent travelling given in seconds.
      points:
        type: integer
        description: The points the user has earned.
#TODO: Add missing objects and other data types here

paths:
  /stations:
    get:
      summary: Retrieves a list of stations.
      description: This endpoint can be called multiple times in succession when searching
        stations by name to provide suggestions for the user to select from. Please provide
        at least 3 characters when retrieving suggestions. Otherwise, only call this endpoint
        with less than 3 characters if the user explicitly requested a search.
      parameters:
        - in: query
          name: findBy
          type: string
          enum: [name, location]
          required: true
          description: Gets stations that match the given type.
        - in: query
          name: limit
          type: integer
          default: 10
          description: Limits the list of results to this amount.
        - in: query
          name: name
          type: string
          description: A (partial) station name that shall be searched for. When calling
            this endpoint without explicit user confirmation (e.g. when trying to provide
            suggestions) provide at least 3 characters.
        - in: query
          name: lat
          type: number
          format: float
          description: The latitude part of the location to be searched around as a float.
            Positive values are in the northern hemisphere, negative in the south.
        - in: query
          name: lon
          type: number
          format: float
          description: The longitude part of the location to be searched around as a float.
            Positive values are in the eastern hemisphere, negative in the west.
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Station'
        400:
          description: Bad request. Will be issued when the type is “name” but the “name”
            parameter is not contained in the request. Will also be issued if the type is
            “location” but either the “lat” or “lon” (or both) parameters are missing.
  /departures:
    get:
      summary: Retrieves departures for a station.
      parameters:
        - in: query
          name: stationId
          type: integer #or do we need a string here?
          required: true
        - in: query
          name: at
          type: string
          format: 'date-time'
          required: true
        - in: query
          name: until
          type: string
          format: 'date-time'
          description: Limits the output by time. All departures between
            at and until will be returned. If this parameter is omitted
            the API will return departures for the next 15 minutes.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Departure'
        400:
          description: Bad request. Will be issued if the "until" parameter
            is given but it is not in the future (relative to the "at"
            parameter). Will also be issued if any of the required parameters
            are missing.
  /user:
    get:
      summary: Retrieves information on a user.
      parameters:
        - in: query
          name: userId
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: Not found.
            There is no user with the given userId.
  /follows:
    get:
      summary: Retrieves the list of users the given user is following.
      parameters:
        - in: query
          name: userId
          required: true
          type: integer
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        404:
          description: Not found.
            There is no user with the given userId.
  /leaderboard:
    get:
      summary: Retrieves the top 20 users.
      parameters:
        - in: query
          name: orderBy
          type: string
          enum: [points, distance]
          default: points
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
  /statuses:
    get:
      summary: Retrieves a list of statuses.
      parameters:
        - in: query
          name: view
          type: string
          enum: [global, follows]
          default: global
          description: Filters the list of statuses so that it will either return the
            global view (i.e. all public statuses == global dashboard) or just the statuses
            of the current user’s follows (i.e. the user’s dashboard).
        #TODO: This needs more parameters to narrow the list of returned statuses.
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Status'
        401:
          description: Unauthorized.
            Will be returned by the server if the view parameter was set to
            dashboard, but no user was logged in.
